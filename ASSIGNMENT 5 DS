#include <iostream>
using namespace std;

struct Node {
    int data;
    Node *next;
};

Node *head = NULL;

// (a) Insertion at beginning
void insertBeg(int val) {
    Node *newNode = new Node();
    newNode->data = val;
    newNode->next = head;
    head = newNode;
}

// (b) Insertion at end
void insertEnd(int val) {
    Node *newNode = new Node();
    newNode->data = val;
    newNode->next = NULL;

    if (head == NULL) {
        head = newNode;
        return;
    }

    Node *temp = head;
    while (temp->next != NULL)
        temp = temp->next;
    temp->next = newNode;
}

// (c) Insertion before or after a given value
void insertSpecific(int val, int key, bool after) {
    if (head == NULL) {
        cout << "List is empty.\n";
        return;
    }
    Node *temp = head;
    Node *newNode = new Node();
    newNode->data = val;

    while (temp != NULL) {
        if (temp->data == key) {
            if (after) {
                newNode->next = temp->next;
                temp->next = newNode;
            } else {
                newNode->next = temp;
                if (temp == head)
                    head = newNode;
                else {
                    Node *prev = head;
                    while (prev->next != temp)
                        prev = prev->next;
                    prev->next = newNode;
                }
            }
            return;
        }
        temp = temp->next;
    }
    cout << "Key not found.\n";
}

// (d) Delete from beginning
void deleteBeg() {
    if (head == NULL) {
        cout << "List empty.\n";
        return;
    }
    Node *temp = head;
    head = head->next;
    delete temp;
}

// (e) Delete from end
void deleteEnd() {
    if (head == NULL) {
        cout << "List empty.\n";
        return;
    }
    if (head->next == NULL) {
        delete head;
        head = NULL;
        return;
    }
    Node *temp = head;
    while (temp->next->next != NULL)
        temp = temp->next;
    delete temp->next;
    temp->next = NULL;
}

// (f) Delete specific node
void deleteSpecific(int key) {
    if (head == NULL) {
        cout << "List empty.\n";
        return;
    }
    Node *temp = head;
    Node *prev = NULL;

    while (temp != NULL && temp->data != key) {
        prev = temp;
        temp = temp->next;
    }
    if (temp == NULL) {
        cout << "Key not found.\n";
        return;
    }
    if (temp == head)
        head = head->next;
    else
        prev->next = temp->next;
    delete temp;
}

// (g) Search a node and display position
void searchNode(int key) {
    Node *temp = head;
    int pos = 1;
    while (temp != NULL) {
        if (temp->data == key) {
            cout << "Node found at position: " << pos << endl;
            return;
        }
        temp = temp->next;
        pos++;
    }
    cout << "Node not found.\n";
}

// (h) Display all nodes
void display() {
    Node *temp = head;
    if (temp == NULL) {
        cout << "List empty.\n";
        return;
    }
    cout << "List: ";
    while (temp != NULL) {
        cout << temp->data << " -> ";
        temp = temp->next;
    }
    cout << "NULL\n";
}

// (2) Count and delete all occurrences of key
void countAndDelete(int key) {
    Node *temp = head, *prev = NULL;
    int count = 0;

    while (temp != NULL) {
        if (temp->data == key) {
            count++;
            if (temp == head) {
                head = head->next;
                delete temp;
                temp = head;
            } else {
                prev->next = temp->next;
                delete temp;
                temp = prev->next;
            }
        } else {
            prev = temp;
            temp = temp->next;
        }
    }
    cout << "Count: " << count << endl;
    cout << "Updated ";
    display();
}

// (3) Find middle node
void findMiddle() {
    if (head == NULL) {
        cout << "List empty.\n";
        return;
    }
    Node *slow = head, *fast = head;
    while (fast != NULL && fast->next != NULL) {
        slow = slow->next;
        fast = fast->next->next;
    }
    cout << "Middle node is: " << slow->data << endl;
}

// (4) Reverse linked list
void reverseList() {
    Node *prev = NULL, *curr = head, *next = NULL;
    while (curr != NULL) {
        next = curr->next;
        curr->next = prev;
        prev = curr;
        curr = next;
    }
    head = prev;
    cout << "List reversed.\n";
}

int main() {
    int ch, val, key;
    do {
        cout << "\n---- MENU ----\n";
        cout << "1. Insert at Beginning\n2. Insert at End\n3. Insert Before/After\n";
        cout << "4. Delete from Beginning\n5. Delete from End\n6. Delete Specific Node\n";
        cout << "7. Search Node\n8. Display\n9. Count & Delete Key\n";
        cout << "10. Find Middle\n11. Reverse List\n12. Exit\n";
        cout << "Enter choice: ";
        cin >> ch;

        switch (ch) {
        case 1:
            cout << "Enter value: ";
            cin >> val;
            insertBeg(val);
            break;
        case 2:
            cout << "Enter value: ";
            cin >> val;
            insertEnd(val);
            break;
        case 3:
            cout << "Enter new value and key: ";
            cin >> val >> key;
            cout << "Insert (1) After or (0) Before key? ";
            int choice;
            cin >> choice;
            insertSpecific(val, key, choice);
            break;
        case 4:
            deleteBeg();
            break;
        case 5:
            deleteEnd();
            break;
        case 6:
            cout << "Enter key to delete: ";
            cin >> key;
            deleteSpecific(key);
            break;
        case 7:
            cout << "Enter value to search: ";
            cin >> key;
            searchNode(key);
            break;
        case 8:
            display();
            break;
        case 9:
            cout << "Enter key to count & delete: ";
            cin >> key;
            countAndDelete(key);
            break;
        case 10:
            findMiddle();
            break;
        case 11:
            reverseList();
            break;
        case 12:
            cout << "Exiting...\n";
            break;
        default:
            cout << "Invalid choice.\n";
        }
    } while (ch != 12);

    return 0;
}
